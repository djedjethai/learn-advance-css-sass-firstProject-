/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/


/* universal selector will select all elements on the page and apply it to them. to prevent pre-setting of the differents browser.
Like it s the same for all*/

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /*by default box-sizing do not herite. but setting up the all page like it will make it everywhere*/
    box-sizing: inherit;
}


/*html element is the root font-size. so set it up, and then we use rem with all other font-size 
(like this we can modify this one, and all get modify)*/

html {
    /*10px to make it easy ! as 1rem is root's font-size * rem. So 1rem will be 10px.
    But we don t want it in px bc it will lock the screen of the user: if he want to agrandir, il ne pourra plus, donc
    on convertir en %. 100% = 16px dc 62.5% = 10px*/
    font-size: 62.5%;
}


/*setting it here will make it available for the all doc, via l'heritage*/

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /*font-size: 16px;*/
    line-height: 1.7;
    /*predefine the line-height 1.7 fois bigger than the default one*/
    color: #777;
    padding: 3rem;
    /*so from here all the child class of the doc herite de border-box*/
    box-sizing: border-box;
}

.header {
    /*95% of the view port point*/
    height: 95vh;
    background-image: linear-gradient( to right bottom, rgba(126, 213, 111, 0.801), rgba(40, 180, 133, 0.801)), url(../img/hero.jpg);
    /*what ever the view port, cover will always try to fit the elmt inside the box*/
    background-size: cover;
    /*fix the backGr at the top*/
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative;
}

.header__logo-box {
    /*position: absolut; must have parent with position: relative;*/
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}


/*we can use the animation created on any object*/

.logo:hover {
    animation: moveInRight 2s ease-out;
}

.header__text-box {
    text-align: center;
    position: absolute;
    /*40% and 50% from the parent element*/
    top: 40%;
    left: 50%;
    /*readjust l'alignement x et y par rapport l'element lui-meme*/
    transform: translate(-50%, -50%);
}

.heading-primary {
    color: white;
    text-transform: uppercase;
    /*to stop potentiel shaking on anumation, we add this ligne*/
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /*to validate the @keyframes animation, we need this 2 lines*/
    animation-name: moveInLeft;
    animation-duration: 2s;
    /*accelere ou ralentit le debut ou la fin, ou alterne ease-in-out*/
    animation-timing-function: ease-out;
    /*set a delay before the animation start
    animation-delay: 3s;
    repeat an animation few times
    animation-iteration-count: 3;*/
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /*write it on one line to be faster*/
    animation: moveInRight 2s ease-out;
}

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    /*just to show like crazy animation*/
    60% {
        transform: rotate(180deg);
    }
    80% {
        transform: translateX(1rem) rotate(180deg);
    }
    /*on pourrait aussi mettre des etapes/pourcentage intermediare*/
    100% {
        opacity: 1;
        transform: translate(0) rotate(180deg);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(+10rem);
    }
    80% {
        transform: translateX(-1rem)
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}


/*make the button coming from the bottom*/

@keyframes moveInButton {
    0% {
        opacity: 0;
        transform: translateY(+3rem);
    }
    100% {
        /*the pb here, is that this animation start with a delay, so the opacity 1 occur with delay as well...
        pr palier a ca on utilise: animation-fill-mode: backwards; see the button effect below*/
        opacity: 1;
        transform: translateY(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.4rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /*to stop potentiel shaking on anumation, we add this ligne*/
    backface-visibility: hidden;
    /*transition is the simple way to create effects, all is to select all properties, and 2s for the time */
    transition: all .2s;
    /*as we want the ::after (which have a position:absolute) to refer to this element*/
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-3px);
    /* .2 means 0.2, it s the opacity, so 20%. that s good at this rate*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2);
}


/*!!! ici on part du :hover . Donc le -1 aura un effet de descendre*/

.btn:active {
    transform: translateY(-1px);
    /*here is half of the hover value, as we clicked on it*/
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .2);
}

.btn--white {
    background-color: white;
    color: #777;
}

.btn::after {
    /*for this sudo effect, the content: and display: property have to appear, even empty*/
    content: '';
    /*as the btn is already a inline-block*/
    display: inline-block;
    /*pourcentage par rapport au parent donc au .btn*/
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /*this is the start of the effect link to .btn:hover::after*/
    transition: all .4s;
}

.btn--white::after {
    background-color: white;
}


/*l'effect apparaitra after the hover*/

.btn:hover::after {
    /*grossit 1.5 fois. the simple one: transform: scale(1.5);
    more complexe:*/
    transform: scaleX(1.4) scaleY(1.6);
    /*that is the trick to fade something up*/
    opacity: 0;
}

.btn--animated {
    /*last value is a start delay, so 0,75s*/
    animation: moveInButton .5s ease-out .75s;
    /*permet de palier au delay, d'initialiser le stade initial de depart d'animation sans delay.*/
    animation-fill-mode: backwards;
}